package com.example.moneyeverydayxml.notification.parser

import android.util.Log
import com.example.moneyeverydayxml.calculator.domain.InteractorInterface
import com.example.moneyeverydayxml.history.domain.model.MainData
import com.example.moneyeverydayxml.history.domain.model.Transaction
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import org.koin.java.KoinJavaComponent.inject
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –¢–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
class NotificationParserTest {

    companion object {
        private const val TAG = "NotificationParserTest"
    }

    private val parser = NotificationParser()
    private val interactor: InteractorInterface by inject(InteractorInterface::class.java)
    private val scope = CoroutineScope(Dispatchers.IO)

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    fun testNotificationFormats() {
        Log.d(TAG, "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")

        // –¢–µ—Å—Ç 1: –ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏
        testNotification(
            "–°–±–µ—Ä–±–∞–Ω–∫",
            "–ó–∞—á–∏—Å–ª–µ–Ω–æ 5000 —Ä—É–±. –Ω–∞ –∫–∞—Ä—Ç—É ****1234",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: –¥–æ—Ö–æ–¥ 5000 —Ä—É–±."
        )

        // –¢–µ—Å—Ç 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        testNotification(
            "–ú–∞–≥–Ω–∏—Ç",
            "–ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Å—É–º–º—É 1250 ‚ÇΩ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ú–∞–≥–Ω–∏—Ç",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: —Ä–∞—Å—Ö–æ–¥ -1250 —Ä—É–±."
        )

        // –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏
        testNotification(
            "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
            "–ü–µ—Ä–µ–≤–æ–¥ 14000 —Ä—É–±–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: —Ä–∞—Å—Ö–æ–¥ -14000 —Ä—É–±."
        )

        // –¢–µ—Å—Ç 4: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        testNotification(
            "–ÆMoney",
            "–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 3000 —Ä—É–±.",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: –¥–æ—Ö–æ–¥ 3000 —Ä—É–±."
        )

        // –¢–µ—Å—Ç 5: –ù–µ—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å)
        testNotification(
            "WhatsApp",
            "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–≤–∞–Ω–∞",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å"
        )

        // –¢–µ—Å—Ç 6: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º, –Ω–æ –±–µ–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        testNotification(
            "Telegram",
            "–£ –≤–∞—Å 5 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å"
        )

        // –¢–µ—Å—Ç 7: –î–æ–ª–ª–∞—Ä—ã
        testNotification(
            "PayPal",
            "Payment received: $50.00 USD",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: –¥–æ—Ö–æ–¥ 50 —Ä—É–±."
        )

        // –¢–µ—Å—Ç 8: –ï–≤—Ä–æ
        testNotification(
            "Revolut",
            "Spent ‚Ç¨25.50 at restaurant",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è: —Ä–∞—Å—Ö–æ–¥ -25.50 —Ä—É–±."
        )
    }

    private fun testNotification(source: String, text: String, expected: String) {
        Log.d(TAG, "\n--- –¢–µ—Å—Ç: $source ---")
        Log.d(TAG, "–¢–µ–∫—Å—Ç: $text")
        Log.d(TAG, "–û–∂–∏–¥–∞–Ω–∏–µ: $expected")

        val isFinancial = parser.isFinancialTransaction("", text)
        Log.d(TAG, "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: $isFinancial")

        if (isFinancial) {
            val amount = parser.extractAmount("", text)
            val description = parser.extractDescription("", text)

            Log.d(TAG, "–°—É–º–º–∞: $amount")
            Log.d(TAG, "–û–ø–∏—Å–∞–Ω–∏–µ: $description")

            if (amount != null) {
                Log.d(TAG, "‚úÖ –£–°–ü–ï–•: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                saveTransactionToDatabase(amount.toDouble(), description ?: "", source)
            } else {
                Log.d(TAG, "‚ùå –û–®–ò–ë–ö–ê: –°—É–º–º–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞")
            }
        } else {
            Log.d(TAG, "‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    private fun saveTransactionToDatabase(amount: Double, description: String, source: String) {
        val currentTime = System.currentTimeMillis()
        val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())
        val currentDate = dateFormat.format(Date(currentTime))

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
        val formattedAmount = if (amount >= 0) {
            "+${String.format("%.2f", amount)}"
        } else {
            String.format("%.2f", amount)
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        val transactionDescription = if (description.isNotEmpty()) {
            "[–¢–ï–°–¢] $source: $description"
        } else {
            "[–¢–ï–°–¢] $source: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è"
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "—Å—É–º–º–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ"
        val countString = "$formattedAmount - $transactionDescription"

        val transaction = Transaction(
            time = currentTime,
            date = currentDate,
            count = countString
        )

        scope.launch {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                interactor.saveTransaction(transaction)
                Log.d(TAG, "üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $countString")

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—É–º–º—É –≤ MainData
                updateMainDataSummary(amount)

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", e)
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—É–º–º—É –≤ MainData –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    private fun updateMainDataSummary(amount: Double) {
        try {
            val currentMainData = interactor.loadMainData()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            val currentTime = System.currentTimeMillis()
            val daysSinceClear = if (currentMainData.dateOfClear > 0) {
                (currentTime - currentMainData.dateOfClear) / (1000 * 60 * 60 * 24)
            } else {
                0
            }
            
            // –ï—Å–ª–∏ —Å–±—Ä–æ—Å –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è), –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è
            val baseAmount = if (daysSinceClear == 0L) {
                java.math.BigDecimal.ZERO
            } else {
                currentMainData.summaryAmount
            }
            
            val newSummaryAmount = baseAmount.add(java.math.BigDecimal.valueOf(amount))
            
            val updatedMainData = MainData(
                dateOfClear = currentMainData.dateOfClear,
                summaryAmount = newSummaryAmount
            )
            
            interactor.saveMainData(updatedMainData)
            Log.d(TAG, "üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${currentMainData.summaryAmount} ‚Üí ${newSummaryAmount}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º—ã", e)
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    fun testSpecificNotification(title: String, text: String) {
        Log.d(TAG, "=== –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===")
        Log.d(TAG, "–ó–∞–≥–æ–ª–æ–≤–æ–∫: $title")
        Log.d(TAG, "–¢–µ–∫—Å—Ç: $text")

        val isFinancial = parser.isFinancialTransaction(title, text)
        Log.d(TAG, "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: $isFinancial")

        if (isFinancial) {
            val amount = parser.extractAmount(title, text)
            val description = parser.extractDescription(title, text)

            Log.d(TAG, "–°—É–º–º–∞: $amount")
            Log.d(TAG, "–û–ø–∏—Å–∞–Ω–∏–µ: $description")

            if (amount != null) {
                saveTransactionToDatabase(amount.toDouble(), description ?: "", title)
            }
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    fun clearTestTransactions() {
        scope.launch {
            try {
                val allTransactions = interactor.loadTransactions()
                val testTransactions = allTransactions.filter { 
                    it.count.contains("[–¢–ï–°–¢]") 
                }
                
                Log.d(TAG, "–ù–∞–π–¥–µ–Ω–æ ${testTransactions.size} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                for (transaction in testTransactions) {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ deleteTransaction –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    Log.d(TAG, "–£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transaction.count}")
                }
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                recalculateMainDataWithoutTests()
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", e)
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç MainData –±–µ–∑ —É—á–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    private suspend fun recalculateMainDataWithoutTests() {
        try {
            val allTransactions = interactor.loadTransactions()
            val nonTestTransactions = allTransactions.filter { 
                !it.count.contains("[–¢–ï–°–¢]") 
            }
            
            var totalAmount = java.math.BigDecimal.ZERO
            for (transaction in nonTestTransactions) {
                val amount = extractAmountFromTransaction(transaction.count)
                totalAmount = totalAmount.add(java.math.BigDecimal.valueOf(amount))
            }
            
            val currentMainData = interactor.loadMainData()
            val updatedMainData = MainData(
                dateOfClear = currentMainData.dateOfClear,
                summaryAmount = totalAmount
            )
            
            interactor.saveMainData(updatedMainData)
            Log.d(TAG, "üìä MainData –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: $totalAmount")
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ MainData", e)
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private fun extractAmountFromTransaction(transactionText: String): Double {
        return try {
            when {
                // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å—É–º–º–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ"
                transactionText.contains(" - ") -> {
                    val parts = transactionText.split(" - ", limit = 2)
                    parts[0].toDoubleOrNull() ?: 0.0
                }
                // –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transactionText.startsWith("-") -> {
                    transactionText.toDoubleOrNull() ?: 0.0
                }
                transactionText == "–°–±—Ä–æ—Å" -> 0.0
                else -> {
                    transactionText.toDoubleOrNull() ?: 0.0
                }
            }
        } catch (e: Exception) {
            0.0
        }
    }
} 